{"version":3,"sources":["js/01-color-switcher.js","js/03-promisify.js","index.js"],"names":["refs","startBtn","document","querySelector","stopBtn","timerId","getRandomHexColor","Math","floor","random","toString","onChangeColorBody","setInterval","body","style","backgroundColor","setAttribute","onCancelColorBody","clearInterval","removeAttribute","addEventListener","delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","then","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","onSuccess","onError","id","logSuccess","logError","warn"],"mappings":";;;AAAAA,KAAO,CACLC,SAAUC,SAASC,cAAc,sBACjCC,QAASF,SAASC,cAAc,sBAElC,IAAIE,EAAU,KAGd,SAASC,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAO3D,SAASC,IACPN,EAAUO,YAAY,KACpBV,SAASW,KAAKC,MAAMC,gBAAkBT,KACrC,KACHN,KAAKC,SAASe,aAAa,WAAY,QAGzC,SAASC,IACPC,cAAcb,GACdH,SAASW,KAAKC,MAAMC,gBAAkB,GACtCf,KAAKC,SAASkB,gBAAgB,YAbhCnB,KAAKC,SAASmB,iBAAiB,QAAST,GACxCX,KAAKI,QAAQgB,iBAAiB,QAASH;;ACZvC,MAAMI,EAAQC,IAGL,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KAEPF,KAAWF,MAIZA,MAIDK,EAASC,GAAQC,QAAQC,uBAAuBF,OAQhDG,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KAE3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAIxD,OAFPV,QAAQC,IAAIO,GAEL,IAAId,QAAQ,CAACC,EAASC,KACvBW,EACFZ,KAAWa,KAEXZ,EAAO,sCAYbS,EAAgBH,EAAO,SAASS,KAAKX,QAAQY,OAC7CP,EAAgBH,EAAO,QAAQS,KAAKX,QAAQY,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BrC,KAAKC,MAAMD,KAAKE,UAAYmC,EAAMD,EAAM,GAAKA,GAGhDE,EAAkB,CAACC,EAAaC,EAAWC,KACzC3B,MAAAA,EAAQqB,EAA0B,IAAK,KAE7ChB,WAAW,KACUnB,KAAKE,SAAW,GAGjCsC,EAAU,CAAEE,GAAIH,EAAYG,GAAIrB,KAAMP,IAEtC2B,EAAQF,EAAYG,KAErB5B,IAGC6B,EAAa,EAAGD,GAAAA,EAAIrB,KAAAA,MACxBC,QAAQC,mBAAmBmB,kBAAmBrB,SAG1CuB,EAAWF,IACfpB,QAAQuB,qCAAqCH;;AC5E/C,aAHA,QAAA,oBACA,QAAA,0BACA,QAAA,iBACA,QAAA","file":"src.03d91f7f.js","sourceRoot":"../src","sourcesContent":["refs = {\n  startBtn: document.querySelector('button[data-start]'),\n  stopBtn: document.querySelector('button[data-stop]')\n}\nlet timerId = null\n\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\n\nrefs.startBtn.addEventListener('click', onChangeColorBody)\nrefs.stopBtn.addEventListener('click', onCancelColorBody)\n\nfunction onChangeColorBody() {\n  timerId = setInterval(() => {\n    document.body.style.backgroundColor = getRandomHexColor()\n  }, 1000);\n  refs.startBtn.setAttribute('disabled', 'true')\n}\n\nfunction onCancelColorBody() {\n  clearInterval(timerId);\n  document.body.style.backgroundColor = ''\n  refs.startBtn.removeAttribute('disabled')\n}","// ======================= Subtask 1 =======================\nconst delay = ms => {\n  const isSuccess = true\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (isSuccess) {\n        resolve(`${ms}`);\n      } else {\n        reject();\n      }\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\n// delay(2000).then(logger); // Fulfilled after 2000ms\n// delay(1000).then(logger); // Fulfilled after 1000ms\n// delay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n\n  const updatedUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user\n  )\n  console.log(updatedUsers);\n\n  return new Promise((resolve, reject) => {\n    if (username) {\n      resolve(`${updatedUsers}`)\n    } else {\n      reject('There is no user with that name')\n    }\n\n  })\n\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess({ id: transaction.id, time: delay });\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}.Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/01-color-switcher'\nimport './js/02-timer'\nimport './js/03-promisify'"]}